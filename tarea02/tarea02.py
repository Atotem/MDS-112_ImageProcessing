# -*- coding: utf-8 -*-
"""tarea02

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cIwGlbAIFi6hrb3S4x7R1dEwP_FisLQi
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
import numpy.matlib

img = cv2.imread('imagen.jpg')
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

plt.imshow(img)
plt.show()

def aplicar_ruido(imagen, frecuencia, amplitud):
  m = imagen.shape[0]
  t = np.linspace(0, 1, m)
  A = amplitud
  n = frecuencia

  y = A*np.sin(2*np.pi*t*n)
  M = np.matlib.repmat(y, m, 1)
  M = M.transpose()

  R = np.add(imagen, M)

  return R

# 10 [Hz], 30 [Hz] y 50 [Hz]
r_10 = aplicar_ruido(gray, 10, 60)
plt.imshow(r_10, cmap='gray')
plt.show()

r_30 = aplicar_ruido(gray, 30, 60)
plt.imshow(r_30, cmap='gray')
plt.show()

r_50 = aplicar_ruido(gray, 50, 60)
plt.imshow(r_50, cmap='gray')
plt.show()

def zoom(imagen, aumento):
  a = aumento
  p = imagen[int(imagen.shape[0]/2)-a:int(imagen.shape[0]/2)+a, int(imagen.shape[0]/2)-a:int(imagen.shape[0]/2)+a]
  dim = (p.shape[1]*10, p.shape[0]*10)
  zoom = cv2.resize(p, dim, cv2.INTER_CUBIC)
  return zoom

# transformada y espectro de r_10
F_10 = np.fft.fft2(r_10)
F_10 = np.fft.fftshift(F_10)
spect_10 = np.log(np.abs(F_10)+1)
plt.imshow(zoom(spect_10, 15), cmap='gray')
plt.show()

# transformada y espectro de r_30
F_30 = np.fft.fft2(r_30)
F_30 = np.fft.fftshift(F_30)
spect_30 = np.log(np.abs(F_30)+1)
plt.imshow(zoom(spect_30, 35), cmap='gray')
plt.show()

# transformada y espectro de r_50
F_50 = np.fft.fft2(r_50)
F_50 = np.fft.fftshift(F_50)
spect_50 = np.log(np.abs(F_50)+1)
plt.imshow(zoom(spect_50, 55), cmap='gray')
plt.show()

# borramos el ruido de r_10
F_10[256+8:256+12, 256-2:256+2] = 0
F_10[256-12:256-8, 256-2:256+2] = 0
spect_10 = np.log(np.abs(F_10)+1)
plt.imshow(zoom(spect_10, 15), cmap='gray')
plt.show()

# borramos el ruido de r_30
F_30[256+28:256+32, 256-2:256+2] = 0
F_30[256-32:256-28, 256-2:256+2] = 0
spect_30 = np.log(np.abs(F_30)+1)
plt.imshow(zoom(spect_30, 35), cmap='gray')
plt.show()

# borramos el ruido de r_50
F_50[256+48:256+52, 256-2:256+2] = 0
F_50[256-52:256-48, 256-2:256+2] = 0
spect_50 = np.log(np.abs(F_50)+1)
plt.imshow(zoom(spect_50, 55), cmap='gray')
plt.show()

# restauracion
RF_10 = np.fft.ifftshift(F_10)
RF_10 = np.fft.ifft2(RF_10)
RF_10 = np.real(RF_10)
plt.imshow(RF_10, cmap='gray')
plt.show()

RF_30 = np.fft.ifftshift(F_30)
RF_30 = np.fft.ifft2(RF_30)
RF_30 = np.real(RF_30)
plt.imshow(RF_30, cmap='gray')
plt.show()

RF_50 = np.fft.ifftshift(F_50)
RF_50 = np.fft.ifft2(RF_50)
RF_50 = np.real(RF_50)
plt.imshow(RF_50, cmap='gray')
plt.show()

img = cv2.imread('cameraman.png', cv2.IMREAD_GRAYSCALE)
m = img.shape[0]
delta=15
V=np.fix(np.linspace(delta,m-delta,delta)).astype('uint8')

img[V,:]=img[V,:]+50
img[:,V]=img[:,V]+50
plt.imshow(img, cmap='gray')
plt.show()

# Analizamos el espectro
F = np.fft.fft2(img)
F = np.fft.fftshift(F)
spect = np.log(np.abs(F)+1)
plt.imshow(spect, cmap='gray')
plt.show()

# 9.48 <-> 2946.2+12731.7j
x = np.linspace(-127, 128, 256)
y = np.linspace(-127, 128, 256)

X, Y = np.meshgrid(x, y)
H = np.exp(-0.0003*(X**2 + Y**2))

plt.imshow(H*spect, cmap='gray')
plt.show()

F = np.fft.ifftshift(F*H)
out = np.fft.ifft2(F) 
plt.imshow(out.astype('uint8'), cmap='gray')
plt.show()

out = cv2.medianBlur(img, 5) # ruido 'sal y pimienta'
plt.imshow(out, cmap='gray')
plt.show()