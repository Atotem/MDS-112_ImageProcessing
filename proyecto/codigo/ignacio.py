# -*- coding: utf-8 -*-
"""Ignacio

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cWDJISQTqRcqZOHJciIfOak5c8M2Uawc

# Ignacio Morande
"""

import cv2
import matplotlib.pyplot as plt
import numpy as np

def segmentacion(imagen):
    img = cv2.imread(imagen)
    img_HSI = cv2.cvtColor(img,cv2.COLOR_BGR2HLS)
    img_YCrCb = cv2.cvtColor(img,cv2.COLOR_BGR2YCrCb)

    dst = cv2.equalizeHist(img_HSI[:,:,0])

    # plt.title('Imagen Ecualizada')
    # plt.imshow(dst, cmap="gray")
    # plt.show()

    ret, Bin1= cv2.threshold(dst, 30, 255, type=cv2.ADAPTIVE_THRESH_GAUSSIAN_C)

    # plt.title('Imagen Threshold')
    # plt.imshow(Bin1, cmap="gray")
    # plt.show()

    kernel_erosion = cv2.getStructuringElement(cv2.MORPH_CROSS, (15,15))
    kernel_dilatacion = cv2.getStructuringElement(cv2.MORPH_CROSS, (28,28))

    img_erosionada = cv2.erode(Bin1, kernel_erosion)

    # plt.title('Imagen erosionada')
    # plt.imshow(img_erosionada, cmap="gray")
    # plt.show()

    img_dilatada = cv2.dilate(img_erosionada, kernel_dilatacion)

    # plt.title('Imagen Apertura')
    # plt.imshow(img_dilatada, cmap="gray")
    # plt.show()

    img_caras = img_dilatada
    # img_caras[700:, :] = 0

    # plt.title('Imagen Apertura caras')
    # plt.imshow(img_caras, cmap="gray")
    # plt.show()

    return img_caras

imagenes = ['Caras01.jpg', 'Caras02.jpg', 'Caras03.jpg', 'Caras04.jpg', 'Caras05.jpg', 'Caras06.jpg', 'Caras07.jpg', ]

for i in imagenes:
    plt.imshow(segmentacion(i), cmap="gray")
    plt.title(i+' Segmentada')
    # plt.savefig(i[0:7]+'_segmentada.jpg')
    plt.show()

for i in range(7):

    refer = cv2.imread('Refer0'+str(i+1)+'.bmp')
    refer = cv2.cvtColor(refer, cv2.COLOR_BGR2GRAY)

    # transformar a una imagen binaria
    img_bin_ideal = refer > 127 # modificar
    img_ideal_segmentada = segmentacion('Caras0'+str(i+1)+'.jpg') > 127 # modificar

    # dejamos valores en ceros y unos
    img_bin_ideal = img_bin_ideal*1
    img_ideal_segmentada = img_ideal_segmentada*1

    # calcular diferencias
    diferencias = img_bin_ideal -  img_ideal_segmentada

    # calcular estadisticas
    TP = np.sum(diferencias == 0)
    FP = np.sum(diferencias == -1)
    FN = np.sum(diferencias == 1)

    print('-----------------------------------')
    print('Imagen '+ str(i+1))
    print('Hay {} True Positive'.format(TP))
    print('Hay {} False Positive'.format(FP))
    print('Hay {} False Negative'.format(FN))

    # despliegue de imagenes
    fig, ax = plt.subplots(nrows=1, ncols=3, dpi=150)
    ax[0].imshow(img_bin_ideal, cmap='gray')
    ax[1].imshow(img_ideal_segmentada, cmap='gray')
    ax[2].imshow(diferencias, cmap='gray')

    ax[0].set_title('Imagen ideal')
    ax[1].set_title('Imagen Segmentada')
    ax[2].set_title('Diferencias')
    # plt.savefig('Diferencias_imagen'+str(i)+'.jpg')
    plt.show()

    TPR = TP / (TP + FN)
    P = TP / (FP + TP)
    F1_score = 2 * (TPR * P) / (TPR + P)

    print('F1 score: {}'.format(round(F1_score, 5)))